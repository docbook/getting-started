buildscript {
  repositories {
    mavenLocal()
    mavenCentral()
    maven { url "https://dev.saxonica.com/maven" }
  }

  configurations.all {
    resolutionStrategy {
      force 'xml-apis:xml-apis:1.4.01',
        "${saxonGroup}:${saxonEdition}:${saxonVersion}",
        "org.xmlresolver:xmlresolver:${xmlresolverVersion}",
        'org.nwalsh:sinclude:4.2.1'
    }
  }

  dependencies {
    classpath group: saxonGroup, name: saxonEdition, version: saxonVersion
    classpath group: 'com.nwalsh', name: 'sinclude', version: '4.2.1'
    classpath group: 'org.docbook', name: 'schemas-docbook', version: docbookVersion
    classpath group: 'org.docbook', name: 'docbook-xslTNG', version: '1.11.0b1'
  }
}

plugins {
  id "java"
  id 'com.nwalsh.gradle.saxon.saxon-gradle' version '0.9.6'
  id 'com.nwalsh.gradle.relaxng.validate' version '0.0.6'
  id 'com.nwalsh.gradle.relaxng.translate' version '0.0.6'
}

import com.nwalsh.gradle.saxon.SaxonXsltTask
import com.nwalsh.gradle.relaxng.validate.RelaxNGValidateTask
import com.nwalsh.gradle.relaxng.translate.RelaxNGTranslateTask
import org.docbook.xsltng.extensions.Register
import com.nwalsh.sinclude.XInclude

repositories {
  mavenLocal()
  mavenCentral()
  maven { url "https://dev.saxonica.com/maven" }
}

configurations.all {
  resolutionStrategy {
    force 'xml-apis:xml-apis:1.4.01',
      "${saxonGroup}:${saxonEdition}:${saxonVersion}",
      "org.xmlresolver:xmlresolver:${xmlresolverVersion}"
  }
}

configurations {
  transform.extendsFrom(implementation)
}

dependencies {
  implementation (
    [group: saxonGroup, name: saxonEdition, version: saxonVersion],
    [group: 'org.docbook', name: 'docbook-xslTNG', version: '1.11.0b1'],
    [group: 'org.docbook', name: 'schemas-docbook', version: docbookVersion]
  )
}

saxon.configure {
  initializer 'org.docbook.xsltng.extensions.Register'
}

defaultTasks "weblog"

task weblog(
  dependsOn: ["copy_resources"],
  description: "Build the weblog",
  group: "weblog"
) {
  // Just somewhere to hang dependencies
}

task compile_info(
  description: "Summarize all the weblog posts"
) {
  inputs.files fileTree("${buildDir}/extract")
  outputs.file "${buildDir}/info.xml"

  doLast {
    def writer = new PrintStream(new File("${buildDir}/info.xml"))
    writer.println("<article-info xmlns='http://docbook.org/ns/docbook'>")

    fileTree(dir: "${buildDir}/extract", include: "**/*.xml").each { info ->
      def reader = new BufferedReader(new FileReader(info))
      String line = null
      while ((line = reader.readLine()) != null) {
        writer.println(line)
      }
      reader.close()
    }

    writer.println("</article-info>");
    writer.close();
  }
}

// Use gradle to construct tasks for each page
def srcPrefixLen = "${projectDir}/src/xml".length()+1
fileTree(dir: "${projectDir}/src/xml", include: "**/*.xml").each { xml ->
  String html = "${buildDir}/weblog/" + xml.toString().substring(srcPrefixLen)
  html = html.replaceAll('.xml$', '.html')
  String taskName = xml.toString().substring(srcPrefixLen).replaceAll('/', '_')
  taskName = 'task_' + taskName.replaceAll('.xml$', '')

  Task t = task "extract_${taskName}"(
    type: SaxonXsltTask
  ) {
    input xml
    output "${buildDir}/extract/${taskName}.xml"
    stylesheet "${projectDir}/style/extract.xsl"
  }
  compile_info.dependsOn t

  t = task "${taskName}"(
    type: SaxonXsltTask,
    dependsOn: ["compile_info"]
  ) {
    inputs.files fileTree("${projectDir}/style")
    inputs.file "${buildDir}/info.xml"

    input xml
    output html
    stylesheet "${projectDir}/style/weblog.xsl"
    parameters (
    )
  }
  weblog.dependsOn t
}

// ============================================================

task copy_docbook_resources() {
  def dbjar = null
  configurations.transform.each { path ->
    if (path.toString().contains("docbook-xslTNG")) {
      dbjar = path
    }
  }

  if (dbjar != null) {
    inputs.file dbjar
    outputs.files fileTree(dir: "${buildDir}/docbook-resources")
  }

  doLast {
    if (dbjar == null) {
      throw new GradleException("Failed to locate DocBook xslTNG jar file")
    }

    copy {
      into "${buildDir}/docbook-resources"
      from ({ zipTree(dbjar.toString()) }) {
        include "org/docbook/xsltng/resources/**"
      }
      eachFile { fileCopyDetails ->
        def originalPath = fileCopyDetails.path
        fileCopyDetails.path = originalPath.replace('org/docbook/xsltng/resources/', '')
      }
      includeEmptyDirs = false
    }
  }
}

task copy_resources(
  dependsOn: ["copy_docbook_resources"]
) {
  inputs.files fileTree(dir: "${buildDir}/docbook-resouces")
  inputs.files fileTree(dir: "${projectDir}/resources")

  doLast {
    copy {
      into "${buildDir}/weblog"
      from "${buildDir}/docbook-resources"
    }
  }

  doLast {
    copy {
      from "${projectDir}/resources"
      into "${buildDir}/weblog"
    }
  }
}

// ============================================================

task helloWorld() {
  doLast {
    println('Hello, world.')
  }
}
