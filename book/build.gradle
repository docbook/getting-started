buildscript {
  repositories {
    mavenLocal()
    mavenCentral()
    maven { url "https://dev.saxonica.com/maven" }
  }

  configurations.all {
    resolutionStrategy {
      force 'xml-apis:xml-apis:1.4.01',
        "${saxonGroup}:${saxonEdition}:${saxonVersion}",
        "org.xmlresolver:xmlresolver:${xmlresolverVersion}",
        'org.nwalsh:sinclude:4.2.1'
    }
  }

  dependencies {
    classpath group: saxonGroup, name: saxonEdition, version: saxonVersion
    classpath group: 'com.nwalsh', name: 'sinclude', version: '4.2.1'
    classpath group: 'org.docbook', name: 'schemas-docbook', version: docbookVersion
    classpath group: 'org.docbook', name: 'docbook-xslTNG', version: xslTNGversion
  }
}

plugins {
  id "java"
  id 'com.nwalsh.gradle.saxon.saxon-gradle' version '0.9.6'
  id 'com.nwalsh.gradle.relaxng.validate' version '0.0.6'
  id 'com.nwalsh.gradle.relaxng.translate' version '0.0.6'
}

import com.nwalsh.gradle.saxon.SaxonXsltTask
import com.nwalsh.gradle.relaxng.validate.RelaxNGValidateTask
import com.nwalsh.gradle.relaxng.translate.RelaxNGTranslateTask
import org.docbook.xsltng.extensions.Register
import com.nwalsh.sinclude.XInclude

repositories {
  mavenLocal()
  mavenCentral()
  maven { url "https://dev.saxonica.com/maven" }
}

configurations.all {
  resolutionStrategy {
    force 'xml-apis:xml-apis:1.4.01',
      "${saxonGroup}:${saxonEdition}:${saxonVersion}",
      "org.xmlresolver:xmlresolver:${xmlresolverVersion}"
  }
}

configurations {
  transform.extendsFrom(implementation)
}

dependencies {
  implementation (
    [group: saxonGroup, name: saxonEdition, version: saxonVersion],
    [group: 'org.docbook', name: 'docbook-xslTNG', version: xslTNGversion],
    [group: 'org.docbook', name: 'schemas-docbook', version: docbookVersion]
  )
}

saxon.configure {
  initializer 'org.docbook.xsltng.extensions.Register'
}

def customFonts = (findProperty('customFonts') ?: 'false') == 'true'

public void expandXIncludes(File input, String outputFile) {
  File output = project.file(outputFile)
  XInclude xi = XInclude.newInstance()
  xi.setFixupXmlBase(true)
  xi.setFixupXmlLang(true)
  xi.expandXIncludes(input, output);
}

// ============================================================

task xinclude_book(
) {
  inputs.files fileTree("${projectDir}/src/xml")
  outputs.file "${buildDir}/xinclude/book.xml"

  doLast {
    expandXIncludes(project.file("${projectDir}/src/xml/book.xml"),
                    "${buildDir}/xinclude/book.xml")
  }
}

task validate_book(
  type: RelaxNGValidateTask,
  dependsOn: ["xinclude_book"]
) {
  input xinclude_book.outputs.getFiles().getSingleFile()
  output "${buildDir}/valid/book.xml"
  schema "${projectDir}/src/rng/book.rng"
}

// ============================================================

task publishHtml(
  type: SaxonXsltTask,
  dependsOn: ['validate_book', 'copy_resources', 'copy_web_resources'],
  description: 'Publish book as a single HTML page',
  group: 'publish'
) {
  inputs.files fileTree("${projectDir}/src")

  input validate_book.outputs.getFiles().getSingleFile()
  output "${buildDir}/html/index.html"
  stylesheet "${projectDir}/src/xsl/book.xsl"
  parameters (
    'debug': 'x-mediaobject-uris',
    'mediaobject-input-base-uri': "file:${projectDir}/src/media/",
    'mediaobject-output-base-uri': 'media/',
    'user-css-links': customFonts ? "css/fonts.css css/book.css" : "css/book.css"
  )
}

// ============================================================

task publishHtmlInPages(
  type: SaxonXsltTask,
  dependsOn: ['validate_book', 'copy_resources', 'copy_web_resources'],
  description: 'Publish book as a set of linked HTML pages',
  group: 'publish'
) {
  inputs.files fileTree("${projectDir}/src")

  input validate_book.outputs.getFiles().getSingleFile()
  output "${buildDir}/html/index.html"
  stylesheet "${projectDir}/src/xsl/book.xsl"
  parameters(
    'chunk': 'index.html',
    'chunk-output-base-uri': "${buildDir}/html/",
    'user-css-links': customFonts ? "css/fonts.css css/book.css" : "css/book.css"
  )
}

// ============================================================

String EPUB_ROOT = "${buildDir}/epub"

task epub_resources(
  dependsOn: ['copy_resources','copy_epub_resources', 'copy_print_resources']
) {
  inputs.files fileTree(dir: "${buildDir}/html",
                        includes: ["css/**", "media/**"])
  outputs.files fileTree(dir: "${EPUB_ROOT}/OPS",
                         includes: ["css/**", "media/**"])
  outputs.file "${EPUB_ROOT}/manifest-extra.xml"

  def epubMediaTypes = [
    "css": "text/css",
    "ttf": "font/ttf",
    "woff": "font/woff",
    "jpg": "image/jpeg",
    "jpeg": "image/jpeg",
    "png": "image/png",
    "gif": "image/gif",
    "svg": "image/svg",
    "mp4": "video/mp4",
    "webm": "video/webm",
    "mp3": "audio/mp3",
    "m4a": "audio/m4a"
  ]

  doLast {
    copy {
      into "${EPUB_ROOT}/OPS"
      from "${buildDir}/html"
      include 'media/**'
      include 'css/**'
      exclude 'css/docbook-paged*';
      exclude 'css/docbook.*';
      exclude 'css/docbook-toc.*';
      exclude 'css/speaker-notes.*';
      exclude 'css/print.*';
    }
  }

  doLast {
    def m = new PrintStream(new File("${EPUB_ROOT}/manifest-extra.xml"))
    m.println("<manifest xmlns='http://www.idpf.org/2007/opf'>")
    fileTree(dir: "${EPUB_ROOT}/OPS",
             includes: ["media/**", "css/**"]).each { rsrc ->
      String href = rsrc.toString()
      int pos = href.indexOf("/OPS/")
      href = href.substring(pos+5)
      String id = href.replaceAll("/", "_")

      pos = href.lastIndexOf(".")
      String ext = href.substring(pos+1)
      String mediaType = "application/octet-stream"

      if (epubMediaTypes[ext] != null) {
        mediaType = epubMediaTypes[ext]
      } else {
        println("Warning: Unknown media type: ${href}")
      }

      m.print("<item id='id_${id}' href='${href}' media-type='${mediaType}'")
      if (mediaType == 'image/svg') {
        m.print(" fallback='id_${id.replaceAll('.svg$', '.png')}'")
      }
      if (mediaType.startsWith('image/') && href.startsWith('media/cover.')) {
        m.print(" properties='cover-image'")
      }
      m.println("/>")
    }
    m.println("</manifest>")
    m.close()
  }
}

task format_epub(
  type: SaxonXsltTask,
  dependsOn: ["validate_book", "epub_resources"]
) {
  inputs.files fileTree("${projectDir}/src")

  inputs.file validate_book.outputs.getFiles().getSingleFile()
  outputs.file "${EPUB_ROOT}/META-INF/mimetype"
  outputs.files fileTree(dir: "${EPUB_ROOT}/META-INF")
  outputs.files fileTree(dir: "${EPUB_ROOT}/OPS")

  input validate_book.outputs.getFiles().getSingleFile()
  output "${EPUB_ROOT}/mimetype"
  stylesheet "${projectDir}/src/xsl/epub.xsl"
  parameters(
    'debug': '',
    'pub-id': 'docbook-getting-started-sample',
    'manifest-extra': "file://${EPUB_ROOT}/manifest-extra.xml",
    'chunk-output-base-uri': "${EPUB_ROOT}/",
    'mediaobject-input-base-uri': "file:${projectDir}/src/media/",
    'mediaobject-output-base-uri': 'media/',
    'user-css-links': customFonts ? "css/fonts.css css/book.css" : "css/book.css"
  )
}

task publishEPUB(
  dependsOn: ["format_epub"],
  description: 'Publish book as an EPUB',
  group: 'publish'
) {
  def epub_file = "${EPUB_ROOT}/docbook-getting-started-sample.epub"

  inputs.file "${EPUB_ROOT}/mimetype"
  inputs.files fileTree("${EPUB_ROOT}/META-INF")
  inputs.files fileTree("${EPUB_ROOT}/OPS")
  outputs.file epub_file

  // Ideally, I'd use the Zip task in Gradle here in order
  // to avoid the command-line dependency on "zip", but I
  // can't work out any way to get the Zip task to use
  // "stored" compression for the mimetype and "deflate"
  // for everything else. Suggestions welcome.
  doLast {
    exec {
      workingDir "${EPUB_ROOT}"
      commandLine 'zip', '-q', '-X0', epub_file, 'mimetype'
    }
  }

  doLast {
    exec {
      workingDir "${EPUB_ROOT}"
      commandLine 'zip', '-q', '-rp', epub_file, 'META-INF', 'OPS'
    }
  }

  doLast {
    exec {
      workingDir "${EPUB_ROOT}"
      commandLine "epubcheck", epub_file
    }
  }
}

// ============================================================

task book_pdf_html(
  type: SaxonXsltTask,
  dependsOn: ["validate_book", "copy_resources", "copy_web_resources",
              "copy_print_resources"]
) {
  inputs.files fileTree("${projectDir}/src")

  input validate_book.outputs.getFiles().getSingleFile()
  output "${buildDir}/html/book.pdf.html"
  stylesheet "${projectDir}/src/xsl/print.xsl"
  parameters (
    'debug': 'x-mediaobject-uris',
    'mediaobject-input-base-uri': "file:${projectDir}/src/media/",
    'mediaobject-output-base-uri': 'media/',
    'user-css-links': (customFonts
                       ? "css/fonts.css css/book.css css/print.css"
                       : "css/book.css css/print.css")
  )
}

if (pdfTool == "prince") {
  task publishPdf(type: Exec,
                  dependsOn: ["book_pdf_html"],
                  description: 'Publish book as a PDF with PrinceXML',
                  group: 'publish'
  ) {
    inputs.files fileTree(dir: "${buildDir}/html/css")
    inputs.file("${buildDir}/html/book.pdf.html")
    outputs.file("${buildDir}/book.pdf")
    commandLine "${prince}",
      "${buildDir}/html/book.pdf.html",
      "-o", "${buildDir}/book.pdf"
  }
} else {
  task publishPdf(type: Exec,
                  dependsOn: ["book_pdf_html"],
                  description: 'Publish book as a PDF with AntennaHouse',
                  group: 'publish'
  ) {
    inputs.files fileTree(dir: "${buildDir}/html/css")
    inputs.file("${buildDir}/html/book.pdf.html")
    outputs.file("${buildDir}/book.pdf")
    commandLine "${antennahouse}",
      "-d", "${buildDir}/html/book.pdf.html",
      "-o", "${buildDir}/book.pdf"
  }
}

// ============================================================

task copy_docbook_resources() {
  def dbjar = null
  configurations.transform.each { path ->
    if (path.toString().contains("docbook-xslTNG")) {
      dbjar = path
    }
  }

  if (dbjar != null) {
    inputs.file dbjar
    outputs.files fileTree(dir: "${buildDir}/docbook-resources")
  }

  doLast {
    if (dbjar == null) {
      throw new GradleException("Failed to locate DocBook xslTNG jar file")
    }

    copy {
      into "${buildDir}/docbook-resources"
      from ({ zipTree(dbjar.toString()) }) {
        include "org/docbook/xsltng/resources/**"
      }
      eachFile { fileCopyDetails ->
        def originalPath = fileCopyDetails.path
        fileCopyDetails.path = originalPath.replace('org/docbook/xsltng/resources/', '')
      }
      includeEmptyDirs = false
    }
  }
}

task copy_resources(
  dependsOn: ["copy_docbook_resources"]
) {
  inputs.files fileTree(dir: "${buildDir}/docbook-resouces")
  inputs.files fileTree(dir: "${projectDir}/src/media")
  inputs.files fileTree(dir: "${projectDir}/src/css")
  inputs.files fileTree(dir: "${projectDir}/src/js")
  outputs.files fileTree(dir: "${buildDir}/html/media")
  outputs.files fileTree(dir: "${buildDir}/html/css")
  outputs.files fileTree(dir: "${buildDir}/html/js")

  doLast {
    copy {
      into "${buildDir}/html"
      from "${buildDir}/docbook-resources"
    }
  }

  doLast {
    copy {
      from "${projectDir}/src/media"
      into "${buildDir}/html/media"
    }
  }

  doLast {
    copy {
      from "${projectDir}/src/css"
      into "${buildDir}/html/css"
      exclude 'fonts-web.css'
      exclude 'fonts-epub.css'
    }
  }

  doLast {
    copy {
      from "${projectDir}/src/js"
      into "${buildDir}/html/js"
    }
  }
}

task copy_web_resources(
) {
  if (customFonts) {
    doLast {
      copy {
        from "${projectDir}/src/css"
        into "${buildDir}/html/css"
        include 'fonts-web.css'
        rename('fonts-web.css', 'fonts.css')
      }
    }
  }
}

task copy_epub_resources(
) {
  if (customFonts) {
    doLast {
      copy {
        from "${projectDir}/src/css"
        into "${buildDir}/epub/OPS/css"
        include 'fonts-epub.css'
        rename('fonts-epub.css', 'fonts.css')
      }
    }

    doLast {
      copy {
        from "${projectDir}/src/fonts"
        into "${buildDir}/epub/OPS/css/fonts"
        include "**/*.ttf"
        eachFile {
          path = name
        }
        includeEmptyDirs = false
      }
    }
  }
}

task copy_print_resources(
  type: Copy
) {
  from "${projectDir}/src/fonts"
  into "${buildDir}/html/css/fonts"
  include "**/*.ttf"
  eachFile {
    path = name
  }
  includeEmptyDirs = false
}

// ============================================================
// Testing task for various Gradle debugging efforts

task helloWorld() {
  doLast {
    println("Hello, world.")
    /*
    configurations.transform.resolve().each { path ->
      println(path)
    }
     */
  }
}
